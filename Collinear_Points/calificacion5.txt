See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (3 warnings)
PMD:          FAILED (3 warnings)
Checkstyle:   FAILED (0 errors, 8 warnings)

Correctness:  33/41 tests passed
Memory:       1/1 tests passed
Timing:       41/41 tests passed

Aggregate score: 88.29%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
3.2K Dec 23 02:28 BruteCollinearPoints.java
5.1K Dec 23 02:28 FastCollinearPoints.java
5.0K Dec 23 02:28 Point.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac11 Point.java
*-----------------------------------------------------------

% javac11 LineSegment.java
*-----------------------------------------------------------

% javac11 BruteCollinearPoints.java
*-----------------------------------------------------------

% javac11 FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M V EI_EXPOSE_REP EI: Returns a reference to the mutable object stored in the instance variable 'segments', which exposes the internal representation of the class 'BruteCollinearPoints'. Instead, create a defensive copy of the object referenced by 'segments' and return the copy.  At BruteCollinearPoints.java:[line 63]
M V EI_EXPOSE_REP EI: Returns a reference to the mutable object stored in the instance variable 'segments', which exposes the internal representation of the class 'FastCollinearPoints'. Instead, create a defensive copy of the object referenced by 'segments' and return the copy.  At FastCollinearPoints.java:[line 111]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At FastCollinearPoints.java:[line 41]
Warnings generated: 3


================================================================


% pmd .
*-----------------------------------------------------------
BruteCollinearPoints.java:8: The private instance (or static) variable 'numberSegments' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
BruteCollinearPoints.java:63: Returning 'segments' may expose an internal array. If so, return a defensive copy. [MethodReturnsInternalArray]
FastCollinearPoints.java:111: Returning 'segments' may expose an internal array. If so, return a defensive copy. [MethodReturnsInternalArray]
PMD ends with 3 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BruteCollinearPoints.java:31:30: Do not use the letter 'l' as a local variable name. It is hard to distinguish from the number '1'. [LocalVariableName]
[WARN] BruteCollinearPoints.java:34:31: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] BruteCollinearPoints.java:35:31: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] BruteCollinearPoints.java:72:15: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] BruteCollinearPoints.java:79:15: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] FastCollinearPoints.java:38:15: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] FastCollinearPoints.java:57:27: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] FastCollinearPoints.java:69:19: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
Checkstyle ends with 0 errors and 8 warnings.

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
     Failed on trial 2 of 100000
     p             = (408, 136)
     q             = (223, 136)
     p.slopeTo(q)  = -0.0
  * positive zero     slope, where p and q have coordinates in [0, 32768)
     Failed on trial 1 of 100000
     p             = (30984, 31522)
     q             = (29947, 31522)
     p.slopeTo(q)  = -0.0
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
     Failed on trial 468 of 100000
     p                        = (267, 97)
     q                        = (131, 97)
     student   p.slopeTo(q) = -0.0
     reference p.slopeTo(q) = 0.0
  * slopeTo(), where p and q have coordinates in [0, 32768)
     Failed on trial 6881 of 100000
     p                        = (6720, 6208)
     q                        = (4139, 6208)
     student   p.slopeTo(q) = -0.0
     reference p.slopeTo(q) = 0.0
  * slopeTo(), where p and q have coordinates in [0, 10)
     Failed on trial 15 of 100000
     p                        = (2, 8)
     q                        = (0, 8)
     student   p.slopeTo(q) = -0.0
     reference p.slopeTo(q) = 0.0
  * throw a java.lang.NullPointerException if argument is null
==&gt; FAILED

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==&gt; passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==&gt; passed


Total: 2/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==&gt; passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
==&gt; passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==&gt; passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
==&gt; passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==&gt; passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==&gt; passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==&gt; passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==&gt; passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==&gt; passed

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==&gt; passed

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==&gt; passed

Test 9: random line segments
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==&gt; passed

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
    - failed after 16 operations involving BruteCollinearPoints
    - first and last call to segments() returned different arrays

    - sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);
          collinear.segments()
          collinear.numberOfSegments() -&gt; 2
          collinear.segments()
          mutate array returned by last call to segments()
          collinear.numberOfSegments() -&gt; 2
          mutate points[] array that was passed to constructor
          mutate points[] array that was passed to constructor
          mutate points[] array that was passed to constructor
          mutate points[] array that was passed to constructor
          mutate array returned by last call to segments()
          mutate points[] array that was passed to constructor
          mutate array returned by last call to segments()
          mutate points[] array that was passed to constructor
          mutate array returned by last call to segments()
          collinear.segments()

    - failed on trial 1 of 100

  * equidistant.txt
    - failed after 16 operations involving BruteCollinearPoints
    - first and last call to segments() returned different arrays

    - sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);
          collinear.segments()
          collinear.segments()
          mutate array returned by last call to segments()
          collinear.numberOfSegments() -&gt; 4
          mutate points[] array that was passed to constructor
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -&gt; 4
          collinear.numberOfSegments() -&gt; 4
          mutate array returned by last call to segments()
          collinear.numberOfSegments() -&gt; 4
          mutate array returned by last call to segments()
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -&gt; 4
          collinear.numberOfSegments() -&gt; 4
          collinear.segments()

    - failed on trial 1 of 100

==&gt; FAILED

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
    - data type mutated the points[] array
    - data type should have no side effects unless documented in API

  * equidistant.txt
    - data type mutated the points[] array
    - data type should have no side effects unless documented in API

==&gt; FAILED

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==&gt; passed

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==&gt; passed

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==&gt; passed


Total: 15/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = input299.txt
==&gt; passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
  * filename = horizontal50.txt
  * filename = horizontal75.txt
  * filename = horizontal100.txt
==&gt; passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==&gt; passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
  * filename = vertical50.txt
  * filename = vertical75.txt
  * filename = vertical100.txt
==&gt; passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==&gt; passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==&gt; passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==&gt; passed

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
  * filename = input10.txt
  * filename = input20.txt
  * filename = input50.txt
  * filename = input80.txt
    - number of entries in student   solution: 26
    - number of entries in reference solution: 31
    - 5 missing entries in student solution, including:
      '(26000, 13000) -&gt; (26000, 16000) -&gt; (26000, 22000) -&gt; (26000, 23000)'


  * filename = input300.txt
  * filename = inarow.txt
==&gt; FAILED

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
  * filename = rs1423.txt
==&gt; passed

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==&gt; passed

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = input299.txt
==&gt; passed

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==&gt; passed

Test 9: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
  * 50 random line segments
  * 100 random line segments
==&gt; passed

Test 10: random line segments
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
  * 50 random line segments
  * 100 random line segments
==&gt; passed

Test 11: random distinct points in a given range
  * 5 random points in a 10-by-10 grid
  * 10 random points in a 10-by-10 grid
  * 50 random points in a 10-by-10 grid
    - number of entries in student   solution: 20
    - number of entries in reference solution: 40
    - 20 missing entries in student solution, including:
      '(1, 5) -&gt; (2, 6) -&gt; (4, 8) -&gt; (5, 9)'


    - failed on trial 1 of 100

  * 90 random points in a 10-by-10 grid
    - number of entries in student   solution: 34
    - number of entries in reference solution: 127
    - 93 missing entries in student solution, including:
      '(9, 6) -&gt; (7, 7) -&gt; (5, 8) -&gt; (3, 9)'


    - failed on trial 1 of 50

  * 200 random points in a 50-by-50 grid
    - number of entries in student   solution: 88
    - number of entries in reference solution: 221
    - 133 missing entries in student solution, including:
      '(33, 40) -&gt; (27, 42) -&gt; (18, 45) -&gt; (6, 49)'


    - failed on trial 1 of 10

==&gt; FAILED

Test 12: m*n points on an m-by-n grid
  * 3-by-3 grid
  * 4-by-4 grid
    - number of entries in student   solution: 5
    - number of entries in reference solution: 10
    - 5 missing entries in student solution, including:
      '(3, 0) -&gt; (3, 1) -&gt; (3, 2) -&gt; (3, 3)'


  * 5-by-5 grid
    - number of entries in student   solution: 8
    - number of entries in reference solution: 16
    - 8 missing entries in student solution, including:
      '(0, 1) -&gt; (1, 2) -&gt; (2, 3) -&gt; (3, 4)'


  * 10-by-10 grid
    - number of entries in student   solution: 35
    - number of entries in reference solution: 154
    - 119 missing entries in student solution, including:
      '(9, 6) -&gt; (7, 7) -&gt; (5, 8) -&gt; (3, 9)'


  * 20-by-20 grid
    - number of entries in student   solution: 149
    - number of entries in reference solution: 2446
    - 2297 missing entries in student solution, including:
      '(19, 16) -&gt; (17, 17) -&gt; (15, 18) -&gt; (13, 19)'


  * 5-by-4 grid
    - number of entries in student   solution: 6
    - number of entries in reference solution: 13
    - 7 missing entries in student solution, including:
      '(4, 0) -&gt; (4, 1) -&gt; (4, 2) -&gt; (4, 3)'


  * 6-by-4 grid
    - number of entries in student   solution: 7
    - number of entries in reference solution: 16
    - 9 missing entries in student solution, including:
      '(5, 0) -&gt; (5, 1) -&gt; (5, 2) -&gt; (5, 3)'


  * 10-by-4 grid
    - number of entries in student   solution: 11
    - number of entries in reference solution: 38
    - 27 missing entries in student solution, including:
      '(9, 0) -&gt; (9, 1) -&gt; (9, 2) -&gt; (9, 3)'


  * 15-by-4 grid
    - number of entries in student   solution: 16
    - number of entries in reference solution: 79
    - 63 missing entries in student solution, including:
      '(14, 0) -&gt; (14, 1) -&gt; (14, 2) -&gt; (14, 3)'


  * 25-by-4 grid
    - number of entries in student   solution: 26
    - number of entries in reference solution: 213
    - 187 missing entries in student solution, including:
      '(24, 0) -&gt; (24, 1) -&gt; (24, 2) -&gt; (24, 3)'


==&gt; FAILED

Test 13: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
    - failed after 10 operations involving FastCollinearPoints
    - first and last call to segments() returned different arrays
    - sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
          collinear.numberOfSegments() -&gt; 2
          mutate points[] array that was passed to constructor
          mutate points[] array that was passed to constructor
          mutate points[] array that was passed to constructor
          collinear.segments()
          mutate array returned by last call to segments()
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -&gt; 2
          collinear.segments()
    - failed on trial 1 of 100

  * equidistant.txt
    - failed after 19 operations involving FastCollinearPoints
    - first and last call to segments() returned different arrays
    - sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
          collinear.segments()
          collinear.segments()
          mutate points[] array that was passed to constructor
          mutate points[] array that was passed to constructor
          collinear.segments()
          collinear.segments()
          mutate points[] array that was passed to constructor
          mutate points[] array that was passed to constructor
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -&gt; 4
          collinear.segments()
          collinear.numberOfSegments() -&gt; 4
          collinear.segments()
          collinear.numberOfSegments() -&gt; 4
          mutate points[] array that was passed to constructor
          mutate array returned by last call to segments()
          collinear.numberOfSegments() -&gt; 4
          collinear.segments()
    - failed on trial 1 of 100

==&gt; FAILED

Test 14: check that data type does not mutate the constructor argument
  * input8.txt
    - data type mutated the points[] array
    - data type should have no side effects unless documented in API

  * equidistant.txt
    - data type mutated the points[] array
    - data type should have no side effects unless documented in API

==&gt; FAILED

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==&gt; passed

Test 16: throws an exception if either constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==&gt; passed

Test 17: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==&gt; passed


Total: 16/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    16   0.00           0        1820           3640                   61         
=&gt; passed    32   0.00           0       35960          71920                  152         
=&gt; passed    64   0.03           0      635376        1270752                  370         
=&gt; passed   128   0.10           0    10668000       21336000                  868         
=&gt; passed   256   1.34           0   174792640      349585280                 1985         
==&gt; 5/5 tests passed

Test 2a-2e: Find collinear points among n/4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    16   0.00           0        1892           3784                   61         
=&gt; passed    32   0.00           0       36357          72714                  155         
=&gt; passed    64   0.03           0      636958        1273916                  362         
=&gt; passed   128   0.13           0    10673866       21347732                  864         
=&gt; passed   256   1.64           0   174818094      349636188                 1991         
==&gt; 5/5 tests passed

Total: 10/10 tests passed!


================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.01        7936       18157          44250                  370         
=&gt; passed   128   0.01       32256       86164         204584                  855         
=&gt; passed   256   0.04      130048      381192         892432                 1986         
=&gt; passed   512   0.19      522240     1744696        4011632                 4472         
=&gt; passed  1024   0.50     2093056     7887782       17868620                10046         
=&gt; passed  2048   0.97     8380416    35479863       79340142                22271         
==&gt; 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (79340142 / 17868620) = 2.15
=&gt; passed

==&gt; 7/7 tests passed

Test 2a-2g: Find collinear points among the n points on an n-by-1 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.00        7936        4764          17464                 6607         
=&gt; passed   128   0.00       32256       17796          67848                25628         
=&gt; passed   256   0.00      130048       68717         267482               100655         
=&gt; passed   512   0.01      522240      269399        1061038               398450         
=&gt; passed  1024   0.03     2093056     1065026        4223108              1584411         
=&gt; passed  2048   0.12     8380416     4231214       16842844              6316543         
=&gt; passed  4096   0.37    33538048    16859163       67256374             25220107         
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (67256374 / 16842844) = 2.00
=&gt; passed

==&gt; 8/8 tests passed

Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.00        1160       13806          28772                 2179         
=&gt; passed   128   0.00        2440       49444         101328                 6586         
=&gt; passed   256   0.00        5000      186057         377114                21656         
=&gt; passed   512   0.01       10120      709981        1430082                76677         
=&gt; passed  1024   0.04       20360     2753051        5526462               285493         
=&gt; passed  2048   0.16       40840    10799584       21640008              1097425         
=&gt; passed  4096   0.57       81800    42682082       85445964              4296140         
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (85445964 / 21640008) = 1.98
=&gt; passed

==&gt; 8/8 tests passed

Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.00        1308       16785          34878                 2313         
=&gt; passed   128   0.00        2716       65945         134606                 6729         
=&gt; passed   256   0.01        5532      246644         498820                21870         
=&gt; passed   512   0.02       11164      949973        1911110                76965         
=&gt; passed  1024   0.08       22428     3696110        7414648               285943         
=&gt; passed  2048   0.26       44956    14514416       29073788              1098187         
=&gt; passed  4096   0.97       90012    57416412      114922836              4297570         
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (114922836 / 29073788) = 1.98
=&gt; passed

==&gt; 8/8 tests passed

Total: 31/31 tests passed!


================================================================




